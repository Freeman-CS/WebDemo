<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 配置数据库信息（替代Mybatis的配置文件conf.xml） -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	
		<property name="initialSize" value="0" />		
		<property name="maxActive" value="20" />	
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="0" />		
		<property name="maxWait" value="60000" />
		
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="mergeStat" />
	</bean>
	<!-- 配置MyBatis需要的核心类：SqlSessionFactory -->
	<!-- 在SpringIoc容器中创建MyBatis的核心类 SqlSesionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mapper.xml路径 -->
		<property name="mapperLocations" value="classpath:rml/mapping/*.xml" />
	</bean>
	<!-- 将MyBatis的SqlSessionFactory交给Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="rml.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 上面basePackage所在的property的作用：
	 	将rml.dao包中，所有的接口产生与之对应的动态代理对象
	 	（对象名就是首字母小写的接口名） ：muserMapper -->
	</bean>
	
	<!-- 配置事务管理器transactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 用注解来实现事务管理，即增加对事务的支持  -->   
    <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<!-- “前置通知”类，详见/Spring/src/applicationContext.xml -->
	<!-- =========连接线的一端========= -->
	<!-- <bean id="logBefore" class="org.test.aop.LogBefore"></bean> -->
	<!-- 将rml.service.MUserServiceImpl中的方法 和 通知进行关联  -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* rml.service..*Impl.*(..))" />
		<!-- advisor:相当于连接切入点和切面的线  -->				
		<!-- =========连接线========= -->
		<!-- <aop:advisor advice-ref="logBefore" pointcut-ref="BeforePointcut"/> -->
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

</beans>